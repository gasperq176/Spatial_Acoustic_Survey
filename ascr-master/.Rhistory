sigma <- pars["sigma"]
Dc <- pars["Dc"]
sigma.toa <- pars["sigma.toa"]
mu.rates <- pars["mu.rates"]
speed <- soundspeed
##Generate the region area.
region.lims <- c(NA,NA,NA,NA)
region.lims[1]<- min(traps[,1])-buffer
region.lims[2]<- max(traps[,1])+buffer
region.lims[3]<- min(traps[,2])-buffer
region.lims[4]<- max(traps[,2])+buffer
region.area <- (region.lims[2] - region.lims[1])*
(region.lims[4] - region.lims[3])/10000
## Extracting number of detectors.
n.traps <- nrow(traps)
## Simulating number of animals.
n.acs <- rpois(1, Da*region.area)
## Simulating activity centre locations.
ac.locs.x <- runif(n.acs, region.lims[1], region.lims[2])
ac.locs.y <- runif(n.acs, region.lims[3], region.lims[4])
ac.locs <- cbind(ac.locs.x, ac.locs.y)
##Simulating call centre locations depend on activity centre locations.
localrate<- mu.rates*surveylen
dupnum <- rpois(n.acs,localrate)
ac.locs <- ac.locs[rep(1:nrow(ac.locs),dupnum),]
## Calculating a matrix of differences between activity centres and detectors.
dists <- crossdist(ac.locs[, 1], ac.locs[, 2],
traps[, 1], traps[, 2])
## Calculating detection probabilities.
det.probs <- g0*exp(-dists^2/(2*sigma^2))
## Creating capture histories with ID.
capt.full <- matrix(rbinom(nrow(ac.locs)*n.traps, 1, det.probs),
nrow = nrow(ac.locs), ncol = n.traps)
## We only observe capture histories with at least one detection.
capt$bincapt <- capt.full[apply(capt.full[,1:ncol(capt.full)], 1, sum) > 0, ]
rowfeatures <- c(sprintf("%01d", seq(1,nrow(capt$bincapt))))
rownames(capt$bincapt)[1:nrow(capt$bincapt)] <- rowfeatures
## get the time for each arrival depends on the sd of random error
timerecs <- matrix(data = NA, nrow = nrow(dists), ncol = ncol(dists))
for(i in 1: nrow(dists)){
ranstart <- runif(1,0,surveylen)
for(j in 1: ncol(dists)){
timerecs[i,j] <- ranstart + dists[i,j]/speed + rnorm(1,0,sigma.toa)
}
}
timerecs[capt.full[,1:ncol(capt.full)] == 0] <- 0
capt$toa <- timerecs[apply(timerecs[,1:ncol(timerecs)], 1, sum) > 0, ]
rownames(capt$toa)[1:nrow(capt$toa)] <- rowfeatures
capt
}
##Get average estimated parameters from ascr with simulated data for 100 times
set.seed(4321)
n.sims <- 100
estascr <- matrix(data = NA, nrow = n.sims, ncol = 6)
colnames(estascr) <- c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates")
for(i in 1:n.sims){
capts <- sim.ascr(ascrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
cuesim <- rpois(5, mean(rates))
refit <- fit.ascr(capt = capts, traps = traps, mask = mask,
cue.rates = cuesim, survey.length = 25/60, trace = FALSE)
temppars<-coef(refit,c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates"))
for(j in 1:6){
estascr[i,j] <- temppars[j]
}
}
set.seed(4321)
n.sims <- 100
estascr <- matrix(data = NA, nrow = n.sims, ncol = 6)
colnames(estascr) <- c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates")
for(i in 1:n.sims){
capts <- sim.ascr(ascrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
cuesim <- rpois(5, mean(rates))
refit <- fit.ascr(capt = capts, traps = traps, mask = mask,
cue.rates = cuesim, survey.length = 25/60, trace = FALSE)
temppars<-coef(refit,c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates"))
for(j in 1:6){
estascr[i,j] <- temppars[j]
}
}
estascr
##Get average estimated parameters from scr with simulated data for 100 times
set.seed(1357)
estscr <- matrix(data = NA, nrow = n.sims, ncol = 5)
colnames(estscr) <- c("D", "g0", "sigma", "lambda_c", "sigma_toa")
for(i in 1:n.sims){
capts <- sim.scr(scrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
scrrefit <- scr.fit(capts$bincapt, traps, mask, binom = TRUE, acoustic = TRUE, toa = capts$toa, start = startpars)
temppars<-scrrefit[,1]
for(j in 1:5){
estscr[i,j] <- temppars[j]
}
}
set.seed(1357)
estscr <- matrix(data = NA, nrow = n.sims, ncol = 5)
colnames(estscr) <- c("D", "g0", "sigma", "lambda_c", "sigma_toa")
for(i in 1:n.sims){
capts <- sim.scr(scrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
scrrefit <- scr.fit(capts$bincapt, traps, mask, binom = TRUE, acoustic = TRUE, toa = capts$toa, start = startpars)
temppars<-scrrefit[,1]
for(j in 1:5){
estscr[i,j] <- temppars[j]
}
}
fit$hessian
n.sims <- 1
set.seed(1357)
estscr <- matrix(data = NA, nrow = n.sims, ncol = 5)
colnames(estscr) <- c("D", "g0", "sigma", "lambda_c", "sigma_toa")
for(i in 1:n.sims){
capts <- sim.scr(scrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
scrrefit <- scr.fit(capts$bincapt, traps, mask, binom = TRUE, acoustic = TRUE, toa = capts$toa, start = startpars)
temppars<-scrrefit[,1]
for(j in 1:5){
estscr[i,j] <- temppars[j]
}
}
estscr
set.seed(4321)
n.sims <- 3
estascr <- matrix(data = NA, nrow = n.sims, ncol = 6)
colnames(estascr) <- c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates")
for(i in 1:n.sims){
capts <- sim.ascr(ascrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
cuesim <- rpois(5, mean(rates))
cuesim
refit <- fit.ascr(capt = capts, traps = traps, mask = mask,
cue.rates = cuesim, survey.length = ascrfit$args$survey.length, trace = FALSE)
temppars<-coef(refit,c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates"))
for(j in 1:6){
estascr[i,j] <- temppars[j]
}
}
cuesim
cuesim
cuesim <- rpois(5, mean(rates))
cuesim
cuesim <- rpois(5, mean(rates))
cuesim
##Get average estimated parameters from ascr with simulated data for 100 times
set.seed(4321)
cuesim <- rpois(5, mean(rates))
cuesim
cuesim <- rpois(5, mean(rates))
cuesim
#Fetching the package and fit the model.
library(ascr)
library(devtools)
library(scr)
## This will create objects capt, mask, rates, and traps, used below.
library(spatstat)
load("scr-data.RData")
## Fitting the model.
## capt: A list with two components: "bincapt", the 'binary capture histories' and "toa", the times of arrival.
## traps: The microphone coordinates.
## mask: The mask object.
## cue.rates: A vector containing the numbers of times 8 frogs called during a one-minute period.
## survey.length: The length of the survey, in minutes (these data are from only a 25-second recording).
## trace: if TRUE, a bunch of output will be printed relating to optimisation of the likelihood. If this is annoying, set to FALSE.
ascrfit <- fit.ascr(capt = capt, traps = traps, mask = mask,
cue.rates = rates, survey.length = 25/60, trace = FALSE)
## For parameter estimates.
## Da: Animal density (animals per hectare).
## Dc: Call density (calls per minute per hectare).
## g0, sigma: Detection function parameters.
## sigma.toa: Time-of-arrival error standard deviation (in seconds).
## mu.rates: Expected number of calls per animal per minute.
summary(ascrfit)
## These can also be extracted by parameter names as follows.
coef(ascrfit, c("Da", "sigma","g0"))
## A plot of the estimated detection function.
show.detfn(ascrfit)
## A plot of the estimated location of the second call.
locations(ascrfit, 2)
## Method without having call rates estimated
lambda_c<- coef(ascrfit,c("mu.rates"))*ascrfit$args$survey.length
names(lambda_c) <-"lambda_c"
sigma_toa<-coef(ascrfit,c("sigma.toa"))
names(sigma_toa)<-"sigma_toa"
D<-coef(ascrfit,c("Da"))
names(D)<-"D"
scrpars <- c(D,coef(ascrfit, c("g0", "sigma")),lambda_c, sigma_toa)
startpars<- scrpars
startpars["g0"] <- 0.8
#Function body for capture histroy and time arrival scr
sim.scr <- function(pars, traps, buffer,soundspeed, surveylen){
D <- pars["D"]
g0 <- pars["g0"]
sigma <- pars["sigma"]
lambda_c <- pars["lambda_c"]
sigma.toa <- pars["sigma_toa"]
speed <- soundspeed
##Generate the region area.
region.lims <- c(NA,NA,NA,NA)
region.lims[1]<- min(traps[,1])-buffer
region.lims[2]<- max(traps[,1])+buffer
region.lims[3]<- min(traps[,2])-buffer
region.lims[4]<- max(traps[,2])+buffer
region.area <- (region.lims[2] - region.lims[1])*
(region.lims[4] - region.lims[3])/10000
## Extracting number of detectors.
n.traps <- nrow(traps)
## Simulating number of animals.
n.acs <- rpois(1, D*region.area)
## Simulating activity centre locations.
ac.locs.x <- runif(n.acs, region.lims[1], region.lims[2])
ac.locs.y <- runif(n.acs, region.lims[3], region.lims[4])
ac.loc <- cbind(ac.locs.x, ac.locs.y)
ID <- seq.int(nrow(ac.loc))
ac.locs <- cbind(ac.loc,ID)#location of animals
##Simulating call centre locations depend on activity centre locations.
dupnum <- rpois(n.acs,lambda_c)
ac.locs <- ac.locs[rep(1:nrow(ac.locs),dupnum),]
## Calculating a matrix of differences between activity centres and detectors.
dists <- crossdist(ac.locs[, 1], ac.locs[, 2],
traps[, 1], traps[, 2])
## Calculating detection probabilities.
det.probs <- g0*exp(-dists^2/(2*sigma^2))
## Creating capture histories with ID.
capts.full <- matrix(rbinom(nrow(ac.locs)*n.traps, 1, det.probs),
nrow = nrow(ac.locs), ncol = n.traps)
capt.full <- cbind(capts.full, ac.locs[,ncol(ac.locs)])
colnames(capt.full)[ncol(capt.full)] <- "ID"
## We only observe capture histories with at least one detection.
capt$bincapt <- capt.full[apply(capt.full[,1:(ncol(capt.full)-1)], 1, sum) > 0, ]
rowfeatures <- c(sprintf("%01d", seq(1,nrow(capt$bincapt))))
rownames(capt$bincapt)[1:nrow(capt$bincapt)] <- rowfeatures
## get the time for each arrival depends on the sd of random error
timerecs <- matrix(data = NA, nrow = nrow(dists), ncol = ncol(dists))
for(i in 1: nrow(dists)){
ranstart <- runif(1,0,surveylen)
for(j in 1: ncol(dists)){
timerecs[i,j] <- ranstart + dists[i,j]/speed + rnorm(1,0,sigma.toa)
}
}
timerecs[capt.full[,1:(ncol(capt.full)-1)] == 0] <- 0
capt$toa <- timerecs[apply(timerecs[,1:ncol(timerecs)], 1, sum) > 0, ]
rownames(capt$toa)[1:nrow(capt$toa)] <- rowfeatures
capt
}
simcapt<- sim.scr(scrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
scrfit <- scr.fit(simcapt$bincapt, traps, mask, binom = TRUE, acoustic = TRUE, toa = simcapt$toa, start = startpars)
scrfit
#The object capt is the binary capture histories (0s and 1s), with an extra column on the end, which gives the animal IDs. #This matrix should therefore have n.traps + 1 columns, where n.traps is the number of detectors.
#The object traps is just your usual traps object.
#The object mask is just your usual mask object.
#The object toa is your matrix of times of arrival, and does not include a final column of animal IDs.
#The object pars is a vector of start values for optimisation. It is probably easiest just to set these at the true values of pars.
##True values for the comparison with data from test-data
ascrpars <- coef(ascrfit, c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates"))
#Function body for capture histroy and time arrival ascr
sim.ascr <- function(pars, traps, buffer,soundspeed, surveylen){
Da <- pars["Da"]
g0 <- pars["g0"]
sigma <- pars["sigma"]
Dc <- pars["Dc"]
sigma.toa <- pars["sigma.toa"]
mu.rates <- pars["mu.rates"]
speed <- soundspeed
##Generate the region area.
region.lims <- c(NA,NA,NA,NA)
region.lims[1]<- min(traps[,1])-buffer
region.lims[2]<- max(traps[,1])+buffer
region.lims[3]<- min(traps[,2])-buffer
region.lims[4]<- max(traps[,2])+buffer
region.area <- (region.lims[2] - region.lims[1])*
(region.lims[4] - region.lims[3])/10000
## Extracting number of detectors.
n.traps <- nrow(traps)
## Simulating number of animals.
n.acs <- rpois(1, Da*region.area)
## Simulating activity centre locations.
ac.locs.x <- runif(n.acs, region.lims[1], region.lims[2])
ac.locs.y <- runif(n.acs, region.lims[3], region.lims[4])
ac.locs <- cbind(ac.locs.x, ac.locs.y)
##Simulating call centre locations depend on activity centre locations.
localrate<- mu.rates*surveylen
dupnum <- rpois(n.acs,localrate)
ac.locs <- ac.locs[rep(1:nrow(ac.locs),dupnum),]
## Calculating a matrix of differences between activity centres and detectors.
dists <- crossdist(ac.locs[, 1], ac.locs[, 2],
traps[, 1], traps[, 2])
## Calculating detection probabilities.
det.probs <- g0*exp(-dists^2/(2*sigma^2))
## Creating capture histories with ID.
capt.full <- matrix(rbinom(nrow(ac.locs)*n.traps, 1, det.probs),
nrow = nrow(ac.locs), ncol = n.traps)
## We only observe capture histories with at least one detection.
capt$bincapt <- capt.full[apply(capt.full[,1:ncol(capt.full)], 1, sum) > 0, ]
rowfeatures <- c(sprintf("%01d", seq(1,nrow(capt$bincapt))))
rownames(capt$bincapt)[1:nrow(capt$bincapt)] <- rowfeatures
## get the time for each arrival depends on the sd of random error
timerecs <- matrix(data = NA, nrow = nrow(dists), ncol = ncol(dists))
for(i in 1: nrow(dists)){
ranstart <- runif(1,0,surveylen)
for(j in 1: ncol(dists)){
timerecs[i,j] <- ranstart + dists[i,j]/speed + rnorm(1,0,sigma.toa)
}
}
timerecs[capt.full[,1:ncol(capt.full)] == 0] <- 0
capt$toa <- timerecs[apply(timerecs[,1:ncol(timerecs)], 1, sum) > 0, ]
rownames(capt$toa)[1:nrow(capt$toa)] <- rowfeatures
capt
}
##Get average estimated parameters from ascr with simulated data for 100 times
set.seed(4321)
n.sims <- 10
estascr <- matrix(data = NA, nrow = n.sims, ncol = 6)
colnames(estascr) <- c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates")
for(i in 1:n.sims){
capts <- sim.ascr(ascrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
cuesim <- rpois(5, mean(rates))
refit <- fit.ascr(capt = capts, traps = traps, mask = mask,
cue.rates = cuesim, survey.length = ascrfit$args$survey.length, trace = FALSE)
temppars<-coef(refit,c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates"))
for(j in 1:6){
estascr[i,j] <- temppars[j]
}
}
estascr
##Get average estimated parameters from scr with simulated data for 100 times
set.seed(1357)
estscr <- matrix(data = NA, nrow = n.sims, ncol = 5)
colnames(estscr) <- c("D", "g0", "sigma", "lambda_c", "sigma_toa")
for(i in 1:n.sims){
capts <- sim.scr(scrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
scrrefit <- scr.fit(capts$bincapt, traps, mask, binom = TRUE, acoustic = TRUE, toa = capts$toa, start = startpars)
temppars<-scrrefit[,1]
for(j in 1:5){
estscr[i,j] <- temppars[j]
}
}
estscr
##Create boxplot with percentage bias
##pbias for ascr
pbias<- matrix(data = NA, nrow = n.sims+1, ncol = 6)
colnames(pbias) <- c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates")
for(i in 1:n.sims){
for(j in 1:6){
pbias[i,j]<-(estascr[i,j]- ascrpars[j])*100/ascrpars[j]
}
}
for(c in 1:6){
pbias[n.sims+1]<- mean(pbias[1:n.sims,c])
}
##pbias for scr
scrpbias<- matrix(data = NA, nrow = n.sims+1, ncol = 5)
colnames(scrpbias) <- c("D", "g0", "sigma", "lambda_c", "sigma.toa")
for(i in 1:n.sims){
for(j in 1:5){
scrpbias[i,j]<-(estscr[i,j]- scrpars[j])*100/scrpars[j]
}
}
for(c in 1:5){
scrpbias[n.sims+1]<- mean(scrpbias[1:n.sims,c])
}
##create the plot
par(mfrow=c(1,2), cex = 0.6)
boxplot(pbias,xlab = "ascr Parameters")
abline(h = 0)
boxplot(scrpbias,xlab = "scr Parameters")
abline(h = 0)
compar<-matrix(data = NA,nrow = 3,ncol = 6)
colnames(compar) <- c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates")
rownames(compar)<- c("true", "estimated", "diff")
for(c in 1:6){
compar[1,c]<- ascrpars[c]
compar[2,c] <- mean(estascr[1:n.sims,c])
compar[3,c]<- compar[2,c]-compar[1,c]
}
compar
set.seed(4321)
n.sims <- 100
estascr <- matrix(data = NA, nrow = n.sims, ncol = 6)
colnames(estascr) <- c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates")
for(i in 1:n.sims){
capts <- sim.ascr(ascrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
cuesim <- rpois(5, mean(rates))
refit <- fit.ascr(capt = capts, traps = traps, mask = mask,
cue.rates = cuesim, survey.length = ascrfit$args$survey.length, trace = FALSE)
temppars<-coef(refit,c("Da", "g0", "sigma", "Dc", "sigma.toa", "mu.rates"))
for(j in 1:6){
estascr[i,j] <- temppars[j]
}
}
estascr
##Get average estimated parameters from scr with simulated data for 100 times
set.seed(1357)
estscr <- matrix(data = NA, nrow = n.sims, ncol = 5)
colnames(estscr) <- c("D", "g0", "sigma", "lambda_c", "sigma_toa")
for(i in 1:n.sims){
capts <- sim.scr(scrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
scrrefit <- scr.fit(capts$bincapt, traps, mask, binom = TRUE, acoustic = TRUE, toa = capts$toa, start = startpars)
temppars<-scrrefit[,1]
for(j in 1:5){
estscr[i,j] <- temppars[j]
}
}
fix = list(g0 =1)
coef(ascrfit,c("g0"))
ascrfit <- fit.ascr(capt = capt, traps = traps, mask = mask,
cue.rates = rates, survey.length = 25/60, trace = FALSE)
fix = list(g0 =1)
## For parameter estimates.
## Da: Animal density (animals per hectare).
## Dc: Call density (calls per minute per hectare).
## g0, sigma: Detection function parameters.
## sigma.toa: Time-of-arrival error standard deviation (in seconds).
## mu.rates: Expected number of calls per animal per minute.
summary(ascrfit)
## These can also be extracted by parameter names as follows.
coef(ascrfit, c("Da", "sigma","g0"))
## A plot of the estimated detection function.
show.detfn(ascrfit)
## A plot of the estimated location of the second call.
locations(ascrfit, 2)
lambda_c<- coef(ascrfit,c("mu.rates"))*ascrfit$args$survey.length
names(lambda_c) <-"lambda_c"
sigma_toa<-coef(ascrfit,c("sigma.toa"))
names(sigma_toa)<-"sigma_toa"
D<-coef(ascrfit,c("Da"))
names(D)<-"D"
scrpars <- c(D,coef(ascrfit, c("g0", "sigma")),lambda_c, sigma_toa)
startpars<- scrpars
startpars["g0"] <- 0.8
#Function body for capture histroy and time arrival scr
sim.scr <- function(pars, traps, buffer,soundspeed, surveylen){
D <- pars["D"]
g0 <- pars["g0"]
sigma <- pars["sigma"]
lambda_c <- pars["lambda_c"]
sigma.toa <- pars["sigma_toa"]
speed <- soundspeed
##Generate the region area.
region.lims <- c(NA,NA,NA,NA)
region.lims[1]<- min(traps[,1])-buffer
region.lims[2]<- max(traps[,1])+buffer
region.lims[3]<- min(traps[,2])-buffer
region.lims[4]<- max(traps[,2])+buffer
region.area <- (region.lims[2] - region.lims[1])*
(region.lims[4] - region.lims[3])/10000
## Extracting number of detectors.
n.traps <- nrow(traps)
## Simulating number of animals.
n.acs <- rpois(1, D*region.area)
## Simulating activity centre locations.
ac.locs.x <- runif(n.acs, region.lims[1], region.lims[2])
ac.locs.y <- runif(n.acs, region.lims[3], region.lims[4])
ac.loc <- cbind(ac.locs.x, ac.locs.y)
ID <- seq.int(nrow(ac.loc))
ac.locs <- cbind(ac.loc,ID)#location of animals
##Simulating call centre locations depend on activity centre locations.
dupnum <- rpois(n.acs,lambda_c)
ac.locs <- ac.locs[rep(1:nrow(ac.locs),dupnum),]
## Calculating a matrix of differences between activity centres and detectors.
dists <- crossdist(ac.locs[, 1], ac.locs[, 2],
traps[, 1], traps[, 2])
## Calculating detection probabilities.
det.probs <- g0*exp(-dists^2/(2*sigma^2))
## Creating capture histories with ID.
capts.full <- matrix(rbinom(nrow(ac.locs)*n.traps, 1, det.probs),
nrow = nrow(ac.locs), ncol = n.traps)
capt.full <- cbind(capts.full, ac.locs[,ncol(ac.locs)])
colnames(capt.full)[ncol(capt.full)] <- "ID"
## We only observe capture histories with at least one detection.
capt$bincapt <- capt.full[apply(capt.full[,1:(ncol(capt.full)-1)], 1, sum) > 0, ]
rowfeatures <- c(sprintf("%01d", seq(1,nrow(capt$bincapt))))
rownames(capt$bincapt)[1:nrow(capt$bincapt)] <- rowfeatures
## get the time for each arrival depends on the sd of random error
timerecs <- matrix(data = NA, nrow = nrow(dists), ncol = ncol(dists))
for(i in 1: nrow(dists)){
ranstart <- runif(1,0,surveylen)
for(j in 1: ncol(dists)){
timerecs[i,j] <- ranstart + dists[i,j]/speed + rnorm(1,0,sigma.toa)
}
}
timerecs[capt.full[,1:(ncol(capt.full)-1)] == 0] <- 0
capt$toa <- timerecs[apply(timerecs[,1:ncol(timerecs)], 1, sum) > 0, ]
rownames(capt$toa)[1:nrow(capt$toa)] <- rowfeatures
capt
}
simcapt<- sim.scr(scrpars,traps,30,ascrfit$args$sound.speed,ascrfit$args$survey.length)
scrfit <- scr.fit(simcapt$bincapt, traps, mask, binom = TRUE, acoustic = TRUE, toa = simcapt$toa, start = startpars)
matrix(c(1,2,3))
matrix(c(1,2,3,4,5,6))
matrix(r(1,2,3,4,5,6))
matrix(l(1,2,3,4,5,6))
matrix(row(1,2,3,4,5,6))
matrix(c(1,2,3,4,5,6),2,3)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(linewidth=80)
library(data.table)
library(ggplot2)
library(tidyr)
# Fill in the path to your working directory. If you are on a Windows machine, you will need to use forward slashes (/) instead of backshashes (\)
filePath <- "D:/Internships/Virtual Internship Quantium/"
data <- fread(paste0(filePath,"QVI_data.csv"))
#### Set themes for plots
theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))
#### Calculate these measures over time for each store
#### Add a new month ID column in the data with the format yyyymm.
data[, YEARMONTH := format(data$DATE, "%Y%m")]
measureOverTime <- data[ ,.(totSales = sum(TOT_SALES),
nCustomers = uniqueN(LYLTY_CARD_NBR),
nTxnPerCust = uniqueN(TXN_ID)/uniqueN(LYLTY_CARD_NBR),
nChipsPerTxn = sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR),
avgPricePerUnit = sum(TOT_SALES)/sum(PROD_QTY))
, by = c("STORE_NBR","YEARMONTH")][order(-totSales),]
#### Filter to the pre-trial period and stores with full observation periods
storesWithFullObs <- unique(measureOverTime[, .N, STORE_NBR][N == 12, STORE_NBR])
preTrialMeasures <- measureOverTime[YEARMONTH < 201902 & STORE_NBR %in%
storesWithFullObs, ]
