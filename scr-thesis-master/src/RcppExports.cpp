// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// numNonZero
int numNonZero(NumericVector x);
RcppExport SEXP _scr_numNonZero(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(numNonZero(x));
    return rcpp_result_gen;
END_RCPP
}
// scr_nll_acoustic
double scr_nll_acoustic(NumericVector pars, NumericMatrix caps, NumericMatrix traps, NumericMatrix mask, NumericMatrix maskDists, NumericVector nCalls, NumericMatrix toa, NumericMatrix toa_ssq, bool use_toa, bool is_g0_fixed, double g0_fixed, bool trace);
RcppExport SEXP _scr_scr_nll_acoustic(SEXP parsSEXP, SEXP capsSEXP, SEXP trapsSEXP, SEXP maskSEXP, SEXP maskDistsSEXP, SEXP nCallsSEXP, SEXP toaSEXP, SEXP toa_ssqSEXP, SEXP use_toaSEXP, SEXP is_g0_fixedSEXP, SEXP g0_fixedSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type caps(capsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type maskDists(maskDistsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nCalls(nCallsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type toa(toaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type toa_ssq(toa_ssqSEXP);
    Rcpp::traits::input_parameter< bool >::type use_toa(use_toaSEXP);
    Rcpp::traits::input_parameter< bool >::type is_g0_fixed(is_g0_fixedSEXP);
    Rcpp::traits::input_parameter< double >::type g0_fixed(g0_fixedSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(scr_nll_acoustic(pars, caps, traps, mask, maskDists, nCalls, toa, toa_ssq, use_toa, is_g0_fixed, g0_fixed, trace));
    return rcpp_result_gen;
END_RCPP
}
// eucdist_nll
NumericMatrix eucdist_nll(NumericMatrix points, NumericMatrix traplocations);
RcppExport SEXP _scr_eucdist_nll(SEXP pointsSEXP, SEXP traplocationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type traplocations(traplocationsSEXP);
    rcpp_result_gen = Rcpp::wrap(eucdist_nll(points, traplocations));
    return rcpp_result_gen;
END_RCPP
}
// scr_nll
double scr_nll(NumericVector pars, NumericMatrix caps, NumericMatrix traps, NumericMatrix mask, NumericMatrix maskDists, bool binom);
RcppExport SEXP _scr_scr_nll(SEXP parsSEXP, SEXP capsSEXP, SEXP trapsSEXP, SEXP maskSEXP, SEXP maskDistsSEXP, SEXP binomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type caps(capsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type maskDists(maskDistsSEXP);
    Rcpp::traits::input_parameter< bool >::type binom(binomSEXP);
    rcpp_result_gen = Rcpp::wrap(scr_nll(pars, caps, traps, mask, maskDists, binom));
    return rcpp_result_gen;
END_RCPP
}
// pointgen
NumericMatrix pointgen(int n, NumericVector xlim, NumericVector ylim);
RcppExport SEXP _scr_pointgen(SEXP nSEXP, SEXP xlimSEXP, SEXP ylimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xlim(xlimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ylim(ylimSEXP);
    rcpp_result_gen = Rcpp::wrap(pointgen(n, xlim, ylim));
    return rcpp_result_gen;
END_RCPP
}
// make_toa_ssq
NumericMatrix make_toa_ssq(const NumericMatrix& capt, const NumericMatrix& dists, const double& sound_speed);
RcppExport SEXP _scr_make_toa_ssq(SEXP captSEXP, SEXP distsSEXP, SEXP sound_speedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type capt(captSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< const double& >::type sound_speed(sound_speedSEXP);
    rcpp_result_gen = Rcpp::wrap(make_toa_ssq(capt, dists, sound_speed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scr_numNonZero", (DL_FUNC) &_scr_numNonZero, 1},
    {"_scr_scr_nll_acoustic", (DL_FUNC) &_scr_scr_nll_acoustic, 12},
    {"_scr_eucdist_nll", (DL_FUNC) &_scr_eucdist_nll, 2},
    {"_scr_scr_nll", (DL_FUNC) &_scr_scr_nll, 6},
    {"_scr_pointgen", (DL_FUNC) &_scr_pointgen, 3},
    {"_scr_make_toa_ssq", (DL_FUNC) &_scr_make_toa_ssq, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_scr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
